# Generated from F:/Term7/Compiler/13. AST-builder/13. AST-builder/AssignmentStatement.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,39,307,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,
        1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,
        1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,
        1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,
        1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,
        1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,18,
        1,18,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,
        1,24,1,25,1,25,1,26,1,26,1,27,4,27,186,8,27,11,27,12,27,187,1,28,
        4,28,191,8,28,11,28,12,28,192,1,28,1,28,5,28,197,8,28,10,28,12,28,
        200,9,28,1,28,1,28,4,28,204,8,28,11,28,12,28,205,3,28,208,8,28,1,
        29,1,29,1,29,5,29,213,8,29,10,29,12,29,216,9,29,1,29,1,29,1,30,1,
        30,1,30,5,30,223,8,30,10,30,12,30,226,9,30,1,31,1,31,1,31,1,31,1,
        31,1,32,1,32,1,32,1,32,5,32,237,8,32,10,32,12,32,240,9,32,1,32,1,
        32,1,33,1,33,1,33,1,33,5,33,248,8,33,10,33,12,33,251,9,33,1,33,1,
        33,1,34,1,34,1,34,1,34,5,34,259,8,34,10,34,12,34,262,9,34,1,34,1,
        34,1,35,1,35,1,36,1,36,1,37,1,37,1,37,1,37,3,37,274,8,37,1,38,4,
        38,277,8,38,11,38,12,38,278,1,38,1,38,1,39,1,39,1,39,3,39,286,8,
        39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,297,8,40,1,
        41,1,41,5,41,301,8,41,10,41,12,41,304,9,41,1,41,1,41,1,214,0,42,
        1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
        27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
        49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,
        71,0,73,0,75,0,77,36,79,37,81,38,83,39,1,0,5,1,0,48,57,2,0,65,90,
        97,122,3,0,9,9,13,13,32,32,2,0,60,60,62,62,2,0,10,10,13,13,323,0,
        1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
        0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,
        0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,
        0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,
        0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,
        0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,
        0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,77,1,
        0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,1,85,1,0,0,0,3,93,1,
        0,0,0,5,97,1,0,0,0,7,99,1,0,0,0,9,101,1,0,0,0,11,107,1,0,0,0,13,
        111,1,0,0,0,15,118,1,0,0,0,17,124,1,0,0,0,19,128,1,0,0,0,21,131,
        1,0,0,0,23,136,1,0,0,0,25,141,1,0,0,0,27,147,1,0,0,0,29,150,1,0,
        0,0,31,154,1,0,0,0,33,157,1,0,0,0,35,162,1,0,0,0,37,165,1,0,0,0,
        39,167,1,0,0,0,41,170,1,0,0,0,43,172,1,0,0,0,45,174,1,0,0,0,47,176,
        1,0,0,0,49,178,1,0,0,0,51,180,1,0,0,0,53,182,1,0,0,0,55,185,1,0,
        0,0,57,207,1,0,0,0,59,209,1,0,0,0,61,219,1,0,0,0,63,227,1,0,0,0,
        65,232,1,0,0,0,67,243,1,0,0,0,69,254,1,0,0,0,71,265,1,0,0,0,73,267,
        1,0,0,0,75,273,1,0,0,0,77,276,1,0,0,0,79,285,1,0,0,0,81,296,1,0,
        0,0,83,298,1,0,0,0,85,86,5,112,0,0,86,87,5,114,0,0,87,88,5,111,0,
        0,88,89,5,103,0,0,89,90,5,114,0,0,90,91,5,97,0,0,91,92,5,109,0,0,
        92,2,1,0,0,0,93,94,5,118,0,0,94,95,5,97,0,0,95,96,5,114,0,0,96,4,
        1,0,0,0,97,98,5,44,0,0,98,6,1,0,0,0,99,100,5,58,0,0,100,8,1,0,0,
        0,101,102,5,102,0,0,102,103,5,108,0,0,103,104,5,111,0,0,104,105,
        5,97,0,0,105,106,5,116,0,0,106,10,1,0,0,0,107,108,5,105,0,0,108,
        109,5,110,0,0,109,110,5,116,0,0,110,12,1,0,0,0,111,112,5,115,0,0,
        112,113,5,116,0,0,113,114,5,114,0,0,114,115,5,105,0,0,115,116,5,
        110,0,0,116,117,5,103,0,0,117,14,1,0,0,0,118,119,5,98,0,0,119,120,
        5,101,0,0,120,121,5,103,0,0,121,122,5,105,0,0,122,123,5,110,0,0,
        123,16,1,0,0,0,124,125,5,101,0,0,125,126,5,110,0,0,126,127,5,100,
        0,0,127,18,1,0,0,0,128,129,5,105,0,0,129,130,5,102,0,0,130,20,1,
        0,0,0,131,132,5,116,0,0,132,133,5,104,0,0,133,134,5,101,0,0,134,
        135,5,110,0,0,135,22,1,0,0,0,136,137,5,101,0,0,137,138,5,108,0,0,
        138,139,5,115,0,0,139,140,5,101,0,0,140,24,1,0,0,0,141,142,5,119,
        0,0,142,143,5,104,0,0,143,144,5,105,0,0,144,145,5,108,0,0,145,146,
        5,101,0,0,146,26,1,0,0,0,147,148,5,100,0,0,148,149,5,111,0,0,149,
        28,1,0,0,0,150,151,5,102,0,0,151,152,5,111,0,0,152,153,5,114,0,0,
        153,30,1,0,0,0,154,155,5,116,0,0,155,156,5,111,0,0,156,32,1,0,0,
        0,157,158,5,67,0,0,158,159,5,97,0,0,159,160,5,115,0,0,160,161,5,
        101,0,0,161,34,1,0,0,0,162,163,5,111,0,0,163,164,5,102,0,0,164,36,
        1,0,0,0,165,166,5,63,0,0,166,38,1,0,0,0,167,168,5,58,0,0,168,169,
        5,61,0,0,169,40,1,0,0,0,170,171,5,59,0,0,171,42,1,0,0,0,172,173,
        5,43,0,0,173,44,1,0,0,0,174,175,5,45,0,0,175,46,1,0,0,0,176,177,
        5,42,0,0,177,48,1,0,0,0,178,179,5,47,0,0,179,50,1,0,0,0,180,181,
        5,40,0,0,181,52,1,0,0,0,182,183,5,41,0,0,183,54,1,0,0,0,184,186,
        3,71,35,0,185,184,1,0,0,0,186,187,1,0,0,0,187,185,1,0,0,0,187,188,
        1,0,0,0,188,56,1,0,0,0,189,191,3,71,35,0,190,189,1,0,0,0,191,192,
        1,0,0,0,192,190,1,0,0,0,192,193,1,0,0,0,193,194,1,0,0,0,194,198,
        5,46,0,0,195,197,3,71,35,0,196,195,1,0,0,0,197,200,1,0,0,0,198,196,
        1,0,0,0,198,199,1,0,0,0,199,208,1,0,0,0,200,198,1,0,0,0,201,203,
        5,46,0,0,202,204,3,71,35,0,203,202,1,0,0,0,204,205,1,0,0,0,205,203,
        1,0,0,0,205,206,1,0,0,0,206,208,1,0,0,0,207,190,1,0,0,0,207,201,
        1,0,0,0,208,58,1,0,0,0,209,214,5,34,0,0,210,213,3,75,37,0,211,213,
        9,0,0,0,212,210,1,0,0,0,212,211,1,0,0,0,213,216,1,0,0,0,214,215,
        1,0,0,0,214,212,1,0,0,0,215,217,1,0,0,0,216,214,1,0,0,0,217,218,
        5,34,0,0,218,60,1,0,0,0,219,224,3,73,36,0,220,223,3,73,36,0,221,
        223,3,71,35,0,222,220,1,0,0,0,222,221,1,0,0,0,223,226,1,0,0,0,224,
        222,1,0,0,0,224,225,1,0,0,0,225,62,1,0,0,0,226,224,1,0,0,0,227,228,
        3,61,30,0,228,229,5,91,0,0,229,230,3,55,27,0,230,231,5,93,0,0,231,
        64,1,0,0,0,232,233,5,91,0,0,233,238,3,55,27,0,234,235,5,44,0,0,235,
        237,3,55,27,0,236,234,1,0,0,0,237,240,1,0,0,0,238,236,1,0,0,0,238,
        239,1,0,0,0,239,241,1,0,0,0,240,238,1,0,0,0,241,242,5,93,0,0,242,
        66,1,0,0,0,243,244,5,91,0,0,244,249,3,57,28,0,245,246,5,44,0,0,246,
        248,3,57,28,0,247,245,1,0,0,0,248,251,1,0,0,0,249,247,1,0,0,0,249,
        250,1,0,0,0,250,252,1,0,0,0,251,249,1,0,0,0,252,253,5,93,0,0,253,
        68,1,0,0,0,254,255,5,91,0,0,255,260,3,59,29,0,256,257,5,44,0,0,257,
        259,3,59,29,0,258,256,1,0,0,0,259,262,1,0,0,0,260,258,1,0,0,0,260,
        261,1,0,0,0,261,263,1,0,0,0,262,260,1,0,0,0,263,264,5,93,0,0,264,
        70,1,0,0,0,265,266,7,0,0,0,266,72,1,0,0,0,267,268,7,1,0,0,268,74,
        1,0,0,0,269,270,5,92,0,0,270,274,5,34,0,0,271,272,5,92,0,0,272,274,
        5,92,0,0,273,269,1,0,0,0,273,271,1,0,0,0,274,76,1,0,0,0,275,277,
        7,2,0,0,276,275,1,0,0,0,277,278,1,0,0,0,278,276,1,0,0,0,278,279,
        1,0,0,0,279,280,1,0,0,0,280,281,6,38,0,0,281,78,1,0,0,0,282,286,
        5,10,0,0,283,284,5,13,0,0,284,286,5,10,0,0,285,282,1,0,0,0,285,283,
        1,0,0,0,286,80,1,0,0,0,287,288,5,60,0,0,288,297,5,61,0,0,289,297,
        7,3,0,0,290,291,5,62,0,0,291,297,5,61,0,0,292,293,5,38,0,0,293,297,
        5,38,0,0,294,295,5,124,0,0,295,297,5,124,0,0,296,287,1,0,0,0,296,
        289,1,0,0,0,296,290,1,0,0,0,296,292,1,0,0,0,296,294,1,0,0,0,297,
        82,1,0,0,0,298,302,5,35,0,0,299,301,8,4,0,0,300,299,1,0,0,0,301,
        304,1,0,0,0,302,300,1,0,0,0,302,303,1,0,0,0,303,305,1,0,0,0,304,
        302,1,0,0,0,305,306,6,41,1,0,306,84,1,0,0,0,18,0,187,192,198,205,
        207,212,214,222,224,238,249,260,273,278,285,296,302,2,6,0,0,0,1,
        0
    ]

class AssignmentStatementLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    INT = 28
    FLOAT = 29
    String = 30
    ID = 31
    ARRAY_TYPE = 32
    INT_ARRAY = 33
    FLOAT_ARRAY = 34
    STRING_ARRAY = 35
    WS = 36
    NEWLINE = 37
    RELOP = 38
    LINE_COMMENT = 39

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'program'", "'var'", "','", "':'", "'float'", "'int'", "'string'", 
            "'begin'", "'end'", "'if'", "'then'", "'else'", "'while'", "'do'", 
            "'for'", "'to'", "'Case'", "'of'", "'?'", "':='", "';'", "'+'", 
            "'-'", "'*'", "'/'", "'('", "')'" ]

    symbolicNames = [ "<INVALID>",
            "INT", "FLOAT", "String", "ID", "ARRAY_TYPE", "INT_ARRAY", "FLOAT_ARRAY", 
            "STRING_ARRAY", "WS", "NEWLINE", "RELOP", "LINE_COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "INT", "FLOAT", "String", "ID", "ARRAY_TYPE", 
                  "INT_ARRAY", "FLOAT_ARRAY", "STRING_ARRAY", "DIGIT", "LETTER", 
                  "ESC", "WS", "NEWLINE", "RELOP", "LINE_COMMENT" ]

    grammarFileName = "AssignmentStatement.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


